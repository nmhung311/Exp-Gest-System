#!/usr/bin/env node

// Script ƒë·ªÉ set production environment variables
// S·ª≠ d·ª•ng: node set-production-env.js <your-domain.com>

const fs = require('fs')
const path = require('path')

const domain = process.argv[2]

if (!domain) {
  console.error('‚ùå Vui l√≤ng cung c·∫•p domain!')
  console.log('üìù C√°ch s·ª≠ d·ª•ng: node set-production-env.js <your-domain.com>')
  console.log('üìù V√≠ d·ª•: node set-production-env.js myapp.vercel.app')
  process.exit(1)
}

// T·∫°o n·ªôi dung cho .env.production
const envContent = `# Production environment variables
# Generated by set-production-env.js
NEXT_PUBLIC_API_BASE_URL=https://${domain}
NEXT_PUBLIC_FRONTEND_URL=https://${domain}
`

// T·∫°o n·ªôi dung cho .env.local (development)
const devEnvContent = `# Development environment variables
# This file is for local development only
NEXT_PUBLIC_API_BASE_URL=http://localhost:3000
NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
`

// Ghi file .env.production
fs.writeFileSync(path.join(__dirname, '.env.production'), envContent)
console.log('‚úÖ ƒê√£ t·∫°o file .env.production v·ªõi domain:', domain)

// Ghi file .env.local n·∫øu ch∆∞a c√≥
const envLocalPath = path.join(__dirname, '.env.local')
if (!fs.existsSync(envLocalPath)) {
  fs.writeFileSync(envLocalPath, devEnvContent)
  console.log('‚úÖ ƒê√£ t·∫°o file .env.local cho development')
}

// C·∫≠p nh·∫≠t config.ts v·ªõi domain m·ªõi
const configPath = path.join(__dirname, 'lib', 'config.ts')
let configContent = fs.readFileSync(configPath, 'utf8')

// Thay th·∫ø domain trong config
configContent = configContent.replace(
  /'https:\/\/your-domain\.com'/g,
  `'https://${domain}'`
)

fs.writeFileSync(configPath, configContent)
console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t config.ts v·ªõi domain:', domain)

console.log('\nüéâ Ho√†n th√†nh! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:')
console.log('üìù Development: npm run dev')
console.log('üìù Production: npm run build')
console.log(`üåê Domain: https://${domain}`)
